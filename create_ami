#!/usr/bin/env python

import boto3
import boto3.ec2
import time
import subprocess
import sys
import os

#chcon -R system_u:object_r:openvpn_etc_rw_t:s0 /etc/openvpn

# Instance type to use.
instance_type="t2.micro"

# Fedora 27 in Ireland (eu-west-1).
image_id="ami-78389b01"

# AWS Region
region='eu-west-1'

# Image name
image_name="strongswan-and-cyberprobe-v1.2"

# Name for the SSH keypair we create temporarily.
keypair_name="image-builder"

# Name for the security group we create temporarily.
sg_name="build-ami-sec-group"

# Filename to use to store the private key.
secret_file="key.pem"

#-----------------------------------------------------------------

def connect():

    s = boto3.Session()
    ec2 = s.resource('ec2', region_name=region)
    return ec2

#-----------------------------------------------------------------

#print "Searching images..."
#filters=[]
#filters.append({"Name": "name", "Values": ["ubuntu"]})
#image_id=None

#for i in ec2.images.filter(Filters=filters):
#    print "> ID: %-20s  Name: %-20s" % (i.id, i.name)
#    image_id=i.id

#if image_id == None:
#    print "Haven't got an image which meets my criteria."
#    sys.exit(1)

#-----------------------------------------------------------------

def create_key_pair(ec2, name):
    try:
        print "Deleting keypair if it exists..."
        ec2.KeyPair(keypair_name).delete()
    except:
        print "Failed (ignored)."

    print "Creating keypair..."
    resp = ec2.create_key_pair(KeyName=keypair_name)

    return resp.key_material

#-----------------------------------------------------------------

def create_sec_group(ec2, sg_name):

    for i in ec2.security_groups.all():
        if i.group_name == sg_name:
            print "Delete security group %s" % i.id
            i.delete()

    print "Create security group..."
    sg = ec2.create_security_group(GroupName=sg_name,
                                   Description="SSH access to build instance")

    print "Add SSH ingress to security group..."
    sg.authorize_ingress(
        IpPermissions=[
            { "IpProtocol": "tcp", "FromPort": 22, "ToPort": 22,
              "IpRanges": [ { "CidrIp": "0.0.0.0/0" } ] },
        ]
    )

    return sg

#-----------------------------------------------------------------

def launch_instance(image_id, keypair_name, user_data, itype, sg_name):
    
    bm=[
        {
            "DeviceName": "/dev/sda1",
            "Ebs": {
                "VolumeSize": 8,
                "DeleteOnTermination": True,
                "VolumeType": "gp2"
                #FIXME: Turn on encryption.
            }
        }
    ]

    res = ec2.create_instances(ImageId=image_id, KeyName=keypair_name,
                               UserData=user_data, InstanceType=itype,
                               BlockDeviceMappings=bm,
                               MinCount=1, MaxCount=1,
                               SecurityGroups=[sg_name])

    for i in res:
        print "Instance %s created" % i.id
    
    return res[0]

#-----------------------------------------------------------------

def wait_for_ssh(secret_file, address):

    print "Waiting for ssh service to surface..."

    to_try = 24
    while True:

        cmd = ["ssh", "-i", secret_file, "-o", "StrictHostKeyChecking no",
                "fedora@%s" % address, "id"]
        ret = subprocess.call(cmd, stdout=sys.stdout, stderr=sys.stderr)
        if ret != 0:
            print "Returns", ret
            print "SSH not up."
        else:
            break

        to_try = to_try - 1

        if to_try == 0:
            print "Given up waiting for ssh service to come on stream."
            break
        
        time.sleep(5)

    print "SSH is up."

#-----------------------------------------------------------------

def tailor(secret_file, address):

    print "Copy configure script..."

    cmd = ["scp", "-i", secret_file, "config.sh",
           "fedora@%s:/tmp/config.sh" % address]
    ret = subprocess.call(cmd, stdout=sys.stdout, stderr=sys.stderr)
    if ret != 0:
        print "Returns", ret
        print "Copy failed, this can't complete."

    print "Copy create..."

    cmd = ["scp", "-i", secret_file, "create",
           "fedora@%s:/tmp/create" % address]
    ret = subprocess.call(cmd, stdout=sys.stdout, stderr=sys.stderr)
    if ret != 0:
        print "Returns", ret
        print "Copy failed, this can't complete."

    print "Copy ipsec.conf..."

    cmd = ["scp", "-i", secret_file, "ipsec.conf",
           "fedora@%s:/tmp/ipsec.conf" % address]
    ret = subprocess.call(cmd, stdout=sys.stdout, stderr=sys.stderr)
    if ret != 0:
        print "Returns", ret
        print "Copy failed, this can't complete."

    print "Copy ipsec.conf..."

    cmd = ["scp", "-i", secret_file, "ipsec.secrets",
           "fedora@%s:/tmp/ipsec.secrets" % address]
    ret = subprocess.call(cmd, stdout=sys.stdout, stderr=sys.stderr)
    if ret != 0:
        print "Returns", ret
        print "Copy failed, this can't complete."

    print "Copy startup script..."

    cmd = ["scp", "-i", secret_file, "tailor.sh",
           "fedora@%s:/tmp/tailor" % address]
    ret = subprocess.call(cmd, stdout=sys.stdout, stderr=sys.stderr)
    if ret != 0:
        print "Returns", ret
        print "Copy failed, this can't complete."

    print "Copy ipsec-addr-sync..."

    cmd = ["scp", "-i", secret_file, "ipsec-addr-sync",
           "fedora@%s:/tmp/ipsec-addr-sync" % address]
    ret = subprocess.call(cmd, stdout=sys.stdout, stderr=sys.stderr)
    if ret != 0:
        print "Returns", ret
        print "Copy failed, this can't complete."

    print "Copy dhcp.conf..."

    cmd = ["scp", "-i", secret_file, "dhcp.conf",
           "fedora@%s:/tmp/dhcp.conf" % address]
    ret = subprocess.call(cmd, stdout=sys.stdout, stderr=sys.stderr)
    if ret != 0:
        print "Returns", ret
        print "Copy failed, this can't complete."

    print "Copy dhcp-server..."

    cmd = ["scp", "-i", secret_file, "dhcp-server",
           "fedora@%s:/tmp/dhcp-server" % address]
    ret = subprocess.call(cmd, stdout=sys.stdout, stderr=sys.stderr)
    if ret != 0:
        print "Returns", ret
        print "Copy failed, this can't complete."

    print "Execute configuration script..."

    cmd = ["ssh", "-i", secret_file, "fedora@%s" % address,
           "sudo", "bash", "/tmp/config.sh"]
    ret = subprocess.call(cmd, stdout=sys.stdout, stderr=sys.stderr)
    if ret != 0:
        print "Returns", ret
        print "Install failed, this can't complete."

#-----------------------------------------------------------------

def wait_for_instance(inst, state):

    to_try = 24
    while inst.state["Name"] != state:

        print "Instance is %s..." % inst.state["Name"]

        to_try = to_try - 1

        if to_try == 0:
            print "Given up waiting for instance to change state."
            break
        
        time.sleep(10)

        inst.reload()

    print "Instance is %s." % inst.state["Name"]

#-----------------------------------------------------------------

def wait_for_image_creation(img):

    to_try=480

    while img.state != "available":

        print "Image state is %s..." % img.state

        to_try = to_try - 1

        if to_try == 0:
            print "Given up waiting for image creation to complete."
            break
    
        time.sleep(20)

        img.reload()

    print "Image is available."

#-----------------------------------------------------------------

print "*** Setup"
print "Connecting..."
ec2 = connect()
print "Connected."

print "Using image %s" % image_id

print "Creating keypair..."
key_mat = create_key_pair(ec2, keypair_name)

try:
    os.unlink(secret_file)
except:
    pass

open(secret_file, "w").write(key_mat)
os.chmod(secret_file, 0400)

print "Security group setup..."

sg = create_sec_group(ec2, sg_name)

print "*** Instance creation"

print "Launch instance..."

ud = "user data goes here"
inst = launch_instance(image_id, keypair_name, ud, instance_type, sg_name)

wait_for_instance(inst, "running")

print "Instance %s is running" % inst.id

address = inst.public_ip_address
print "Public IP address is %s" % address

print "Leave time for things to bed in."
time.sleep(15)

wait_for_ssh(secret_file, address)

print "*** Tailoring instance"

tailor(secret_file, address)

print "Leave time for things to settle again."
time.sleep(15)

print "*** Stop instance"

print "Stop instance for snapshot"
inst.stop()

# Wait for instance to stop
wait_for_instance(inst, "stopped")

print "*** Create AMI"

print "Initiate AMI creation"
img = inst.create_image(Name=image_name, Description="StongSwan plus cyberprobe")

print "Image id is", img.id

print "Waiting for image creation to complete..."

wait_for_image_creation(img)

print "*** Cleaning up"

print "Deleting keypair..."
ec2.KeyPair(keypair_name).delete()

print "Terminating instance %s" % inst.id
inst.terminate()

# Wait for instance to terminate
wait_for_instance(inst, "terminated")

print "Deleting security group..."
sg.delete()

# Delete private key file.
os.unlink(secret_file)

print "*** All done."

print "Check Amazon cloud console EC2 -> AMIs for new image."
